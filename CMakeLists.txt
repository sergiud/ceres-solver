# Ceres Solver - A fast non-linear least squares minimizer
# Copyright 2024 Google Inc. All rights reserved.
# http://ceres-solver.org/
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Google Inc. nor the names of its contributors may be
#   used to endorse or promote products derived from this software without
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Authors: keir@google.com (Keir Mierle)
#          alexs.mac@gmail.com (Alex Stewart)

cmake_minimum_required(VERSION 3.18...3.27)
project(Ceres LANGUAGES C CXX VERSION 2.2.0)

# NOTE: The following CMake variables must be applied consistently to all
# targets in project to avoid visibility warnings by placing the variables at
# the project top.

# Always build position-independent code (PIC), even when building Ceres as a
# static library so that shared libraries can link against it, not just
# executables (PIC does not apply on Windows). Global variable can be overridden
# by the user whereas target properties can be not.
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
# Set the default symbol visibility to hidden to unify the behavior among
# the various compilers and to get smaller binaries
set(CMAKE_C_VISIBILITY_PRESET hidden)
set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)

# NOTE: The 'generic' CMake variables CMAKE_[SOURCE/BINARY]_DIR should not be
#       used.  Always use the project-specific variants (generated by CMake):
#       <PROJECT_NAME_MATCHING_CASE>_[SOURCE/BINARY]_DIR, e.g.
#       Ceres_SOURCE_DIR (note, *not* CERES_SOURCE_DIR) instead, as these will
#       always point to the correct directories for the Ceres project, even if
#       it is nested inside another source tree, whereas the 'generic'
#       CMake variables refer to the *first* project() declaration, i.e. the
#       top-level project, not Ceres, if Ceres is nested.

# Make CMake aware of the cmake folder for local FindXXX scripts,
# append rather than set in case the user has passed their own
# additional paths via -D.
list(APPEND CMAKE_MODULE_PATH "${Ceres_SOURCE_DIR}/cmake")

include (AddCompileFlagsIfSupported)
include (CheckCXXCompilerFlag)
include (CheckLanguage)
include (CheckLibraryExists)
include (CMakeDependentOption)
include (CreateCeresConfig)
include (FeatureSummary)
include (GenerateExportHeader)
include (GNUInstallDirs)
include (UpdateCacheVariable)

check_cxx_compiler_flag(/bigobj HAVE_BIGOBJ)
check_library_exists(m pow "" HAVE_LIBM)

# Set up the git hook to make Gerrit Change-Id: lines in commit messages.
include(AddGerritCommitHook)
add_gerrit_commit_hook(${Ceres_SOURCE_DIR} ${Ceres_BINARY_DIR})

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${Ceres_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${Ceres_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${Ceres_BINARY_DIR}/lib)
# Set postfixes for generated libraries based on buildtype.
set(CMAKE_RELEASE_POSTFIX "")
set(CMAKE_DEBUG_POSTFIX "-debug")

# Read the Ceres version from the source, such that we only ever have a single
# definition of the Ceres version.
include(ReadCeresVersionFromSource)
read_ceres_version_from_source(${Ceres_SOURCE_DIR})

set (CPACK_PACKAGE_NAME ceres-solver)
set (CPACK_PACKAGE_DESCRIPTION_SUMMARY "")
set (CPACK_PACKAGE_VERSION_MAJOR ${Ceres_VERSION_MAJOR})
set (CPACK_PACKAGE_VERSION_MINOR ${Ceres_VERSION_MINOR})
set (CPACK_PACKAGE_VERSION_PATCH ${Ceres_VERSION_PATCH})
set (CPACK_PACKAGE_VERSION ${Ceres_VERSION})

include (CMakePackageConfigHelpers)
include (CTest)
include (CPack)
include (CheckFunctionExists)

option (BUILD_DOCUMENTATION "Build User's Guide (html)" OFF)
option (BUILD_EXAMPLES "Build examples" ON)
option (BUILD_SHARED_LIBS "Build Ceres as a shared library." OFF)
option (WITH_BENCHMARK "Build Ceres benchmarking suite" ON)
set (WITH_CUDA default CACHE STRING "Enable use of CUDA linear algebra solvers")
option (WITH_CUSTOM_BLAS "Use handcoded BLAS routines (usually faster) instead of Eigen." ON)
# Enable the use of Eigen as a sparse linear algebra library for
# solving the nonlinear least squares problems.
option (WITH_EIGENSPARSE "Enable Eigen as a sparse linear algebra library." ON)
option (WITH_GFLAGS "Enable Google Flags." ON)
option (WITH_GLOG "Enable Google Log." ON)
option (WITH_LAPACK "Enable use of LAPACK." ON)
# Template specializations for the Schur complement based solvers. If
# compile time, binary size or compiler performance is an issue, you
# may consider disabling this.
option (WITH_SCHUR_SPECIALIZATIONS "Enable fixed-size schur specializations." ON)
option (WITH_SUITESPARSE "Enable SuiteSparse." ON)
cmake_dependent_option (WITH_EIGENMETIS "Enable Eigen METIS support." ON WITH_EIGENSPARSE OFF)

if (NOT WITH_BENCHMARK)
  set (CMAKE_DISABLE_FIND_PACKAGE_benchmark ON)
endif (NOT WITH_BENCHMARK)

# GFlags.
if (NOT WITH_GFLAGS)
  set (CMAKE_DISABLE_FIND_PACKAGE_gflags ON)
endif (NOT WITH_GFLAGS)

if (NOT WITH_GLOG)
  set (CMAKE_DISABLE_FIND_PACKAGE_glog ON)
endif (NOT WITH_GLOG)

# LAPACK (& BLAS).
if (NOT WITH_LAPACK)
  set (CMAKE_DISABLE_FIND_PACKAGE_LAPACK ON)
endif (NOT WITH_LAPACK)

if (NOT WITH_EIGENMETIS)
  set (CMAKE_DISABLE_FIND_PACKAGE_METIS ON)
endif (NOT WITH_EIGENMETIS)

find_package (AccelerateSparse)
find_package (benchmark 1.3)
find_package (Eigen3 3.3 REQUIRED NO_MODULE)
find_package (gflags 2.2.1)
find_package (glog 0.3.5)
find_package (LAPACK)
find_package (METIS)
find_package (Threads REQUIRED)
find_package (SuiteSparse 4.5.6 COMPONENTS CHOLMOD SPQR OPTIONAL_COMPONENTS Partition)

# IOS is defined iff using the iOS.cmake CMake toolchain to build a static
# library for iOS.
if (IOS)
  # Ceres requires at least iOS 7.0+.
  if (IOS_DEPLOYMENT_TARGET VERSION_LESS 7.0)
    message(FATAL_ERROR "Unsupported iOS version: ${IOS_DEPLOYMENT_TARGET}, Ceres "
      "requires at least iOS version 7.0")
  endif()
endif (IOS)

# Ensure that only MPL2 licensed code is part of the default build.
if (WITH_EIGENSPARSE)
  list(APPEND CERES_COMPILE_OPTIONS CERES_USE_EIGEN_SPARSE)
else (WITH_EIGENSPARSE)
  add_definitions(-DEIGEN_MPL2_ONLY)
endif (WITH_EIGENSPARSE)

if (CMAKE_VERSION VERSION_LESS 3.17)
  set_property (CACHE WITH_CUDA PROPERTY STRINGS OFF default)
else (CMAKE_VERSION VERSION_LESS 3.17)
  set_property (CACHE WITH_CUDA PROPERTY STRINGS OFF default static)
endif (CMAKE_VERSION VERSION_LESS 3.17)

if (WITH_CUDA)
  check_language (CUDA)

  if (CMAKE_CUDA_COMPILER)
    enable_language (CUDA)
  endif (CMAKE_CUDA_COMPILER)
endif (WITH_CUDA)

if (CMAKE_CUDA_COMPILER_LOADED)
  set (CERES_CUDA_TARGET_SUFFIX "")
  set (CMAKE_CUDA_RUNTIME_LIBRARY NONE)
  # Support Maxwell, Pascal, Volta, Turing, and Ampere GPUs.
  set (CMAKE_CUDA_ARCHITECTURES "50;60;70;80")

  if (WITH_CUDA STREQUAL "static")
    set(CERES_CUDA_TARGET_SUFFIX "_static")
  endif (WITH_CUDA STREQUAL "static")

  find_package (CUDAToolkit)

  list (APPEND CERES_CUDA_LIBRARIES
    CUDA::cublas${CERES_CUDA_TARGET_SUFFIX}
    CUDA::cudart${CERES_CUDA_TARGET_SUFFIX}
    CUDA::cusolver${CERES_CUDA_TARGET_SUFFIX}
    CUDA::cusparse${CERES_CUDA_TARGET_SUFFIX})
  set (CMAKE_CUDA_RUNTIME_LIBRARY NONE)
else (CMAKE_CUDA_COMPILER_LOADED)
  list (APPEND CERES_COMPILE_OPTIONS CERES_NO_CUDA)
endif (CMAKE_CUDA_COMPILER_LOADED)

add_feature_info (EigenSparse WITH_EIGENSPARSE
"Use Eigen as a sparse linear algebra library for solving the nonlinear \
least squares problems (LGPL licensed Ceres)")

# Set the install path for the installed CeresConfig.cmake configuration file
# relative to CMAKE_INSTALL_PREFIX.
set(RELATIVE_CMAKECONFIG_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/Ceres)

# SuiteSparse.
if (SuiteSparse_FOUND)
  set (SuiteSparse_DEPENDENCY
    "find_dependency (SuiteSparse ${SuiteSparse_VERSION} NO_MODULE)")
else (SuiteSparse_FOUND)
  list (APPEND CERES_COMPILE_OPTIONS CERES_NO_SUITESPARSE)
endif (SuiteSparse_FOUND)

if (NOT LAPACK_FOUND)
  list (APPEND CERES_COMPILE_OPTIONS CERES_NO_LAPACK)
endif (NOT LAPACK_FOUND)

if (NOT SuiteSparse_Partition_FOUND)
  list (APPEND CERES_COMPILE_OPTIONS CERES_NO_CHOLMOD_PARTITION)
endif (NOT SuiteSparse_Partition_FOUND)

if (METIS_FOUND)
  # Since METIS is a private dependency of Ceres, it requires access to the
  # link-only METIS::METIS target to avoid undefined linker errors in projects
  # relying on Ceres. We do not actually need to propagate anything besides
  # the link libraries (such as include directories.)
  set (METIS_DEPENDENCY "find_dependency (METIS ${METIS_VERSION})")
  # METIS find module must be installed unless a package config is being used.
  if (NOT METIS_DIR)
    install (FILES ${Ceres_SOURCE_DIR}/cmake/FindMETIS.cmake
             DESTINATION ${RELATIVE_CMAKECONFIG_INSTALL_DIR})
  endif (NOT METIS_DIR)
else (METIS_FOUND)
  list (APPEND CERES_COMPILE_OPTIONS CERES_NO_EIGEN_METIS)
endif (METIS_FOUND)

add_feature_info (AccelerateSparse WITH_ACCELERATESPARSE
  "Apple's Accelerate sparse support")

if (WITH_ACCELERATESPARSE)
  if (AccelerateSparse_FOUND)
  else()
    update_cache_variable(ACCELERATESPARSE OFF)
    list(APPEND CERES_COMPILE_OPTIONS CERES_NO_ACCELERATE_SPARSE)
  endif()
else()
  list(APPEND CERES_COMPILE_OPTIONS CERES_NO_ACCELERATE_SPARSE)
  mark_as_advanced(FORCE AccelerateSparse_INCLUDE_DIR
                         AccelerateSparse_LIBRARY)
endif()

if (gflags_FOUND)
  include (DetermineGflagsNamespace)

  set (CMAKE_REQUIRED_INCLUDES ${gflags_INCLUDE_DIR})
  determine_gflags_namespace (gflags_NAMESPACE)

  add_definitions (-DCERES_GFLAGS_NAMESPACE=${gflags_NAMESPACE})
endif (gflags_FOUND)

# MiniGLog.
if (NOT glog_FOUND)
  set(glog_INCLUDE_DIRS internal/ceres/miniglog)
  set(MINIGLOG_MAX_LOG_LEVEL 2 CACHE STRING "The maximum message severity level to be logged")
  add_definitions("-DMAX_LOG_LEVEL=${MINIGLOG_MAX_LOG_LEVEL}")
else (NOT glog_FOUND)
  unset(MINIGLOG_MAX_LOG_LEVEL CACHE)
  set (GLOG_DEPENDENCY "find_dependency (glog ${glog_VERSION} NO_MODULE)")
endif (NOT glog_FOUND)

if (NOT WITH_SCHUR_SPECIALIZATIONS)
  list(APPEND CERES_COMPILE_OPTIONS CERES_RESTRICT_SCHUR_SPECIALIZATION)
endif (NOT WITH_SCHUR_SPECIALIZATIONS)

if (NOT WITH_CUSTOM_BLAS)
  list(APPEND CERES_COMPILE_OPTIONS CERES_NO_CUSTOM_BLAS)
endif (NOT WITH_CUSTOM_BLAS)

# Initialise CMAKE_REQUIRED_FLAGS used by CheckCXXSourceCompiles with the
# contents of CMAKE_CXX_FLAGS such that if the user has passed extra flags
# they are used when checking for compiler features.
set(CMAKE_REQUIRED_FLAGS ${CMAKE_CXX_FLAGS})

check_function_exists (_j0 HAVE__J0)
check_function_exists (_j1 HAVE__J1)
check_function_exists (_jn HAVE__JN)

add_feature_info (Benchmarks WITH_BENCHMARK
  "Build Ceres benchmarks")

# After the tweaks for the compile settings, disable some warnings on MSVC.
if (MSVC)
  # Insecure standard library functions
  add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
  # std::numeric_limits<T>::has_denorm is deprecated in C++23
  add_compile_definitions($<$<COMPILE_LANGUAGE:CXX>:_SILENCE_CXX23_DENORM_DEPRECATION_WARNING>)
  # std::aligned_storage is deprecated in C++23
  add_compile_definitions($<$<COMPILE_LANGUAGE:CXX>:_SILENCE_CXX23_ALIGNED_STORAGE_DEPRECATION_WARNING>)
  # Disable signed/unsigned int conversion warnings.
  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/wd4018>)
  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/wd4267>)
  # Disable warning about using struct/class for the same symbol.
  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/wd4099>)
  # Disable performance warning about int-to-bool conversion.
  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/wd4800>)
  # Disable warning about int64 to int32 conversion. Disabling
  # this warning may not be correct; needs investigation.
  # TODO(keir): Investigate these warnings in more detail.
  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/wd4244>)
  # It's not possible to use STL types in DLL interfaces in a portable and
  # reliable way. However, that's what happens with Google Log and Google Flags
  # on Windows. MSVC gets upset about this and throws warnings that we can't do
  # much about. The real solution is to link static versions of Google Log and
  # Google Test, but that seems tricky on Windows. So, disable the warning.
  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/wd4251>)

  # Add bigobj flag otherwise the build would fail due to large object files
  # probably resulting from generated headers (like the fixed-size schur
  # specializations).
  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/bigobj>)

  # Google Flags doesn't have their DLL import/export stuff set up correctly,
  # which results in linker warnings. This is irrelevant for Ceres, so ignore
  # the warnings.
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /ignore:4049")

  # Tuple sizes of 10 are used by Gtest.
  add_definitions("-D_VARIADIC_MAX=10")
endif (MSVC)

if (UNIX)
  # Flags which we add to GCC to make it more picky about stuff
  # we do care about,
  add_cxx_compiler_flag_if_supported(CERES_STRICT_CXX_FLAGS
                                     -Wmissing-declarations)
  # Flags which we add to GCC to silence lots of annoying false-positives.
  add_cxx_compiler_flag_if_supported(CERES_STRICT_CXX_FLAGS
                                     -Wno-unknown-pragmas)
  add_cxx_compiler_flag_if_supported(CERES_STRICT_CXX_FLAGS
                                     -Wno-sign-compare)
  add_cxx_compiler_flag_if_supported(CERES_STRICT_CXX_FLAGS
                                     -Wno-unused-parameter)
  add_cxx_compiler_flag_if_supported(CERES_STRICT_CXX_FLAGS
                                     -Wno-missing-field-initializers)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CERES_STRICT_CXX_FLAGS}")
endif (UNIX)

if (CMAKE_CXX_COMPILER_ID MATCHES "Clang") # Matches Clang & AppleClang.
  # Optimize for Eigen OR enable bitcode; you cannot do both since bitcode is an
  # intermediate representation.
  if (ENABLE_BITCODE)
    set(CMAKE_CXX_FLAGS
      "${CMAKE_CXX_FLAGS} -fembed-bitcode")
  else ()
    # Use a larger inlining threshold for Clang, since it hobbles Eigen,
    # resulting in an unreasonably slow version of the blas routines. The
    # -Qunused-arguments is needed because CMake passes the inline
    # threshold to the linker and clang complains about it and dies.
    set(CMAKE_CXX_FLAGS
      "${CMAKE_CXX_FLAGS} -Qunused-arguments -mllvm -inline-threshold=600")
  endif ()
  # Older versions of Clang (<= 2.9) do not support the 'return-type-c-linkage'
  # option, so check for its presence before adding it to the default flags set.
  check_cxx_compiler_flag("-Wno-return-type-c-linkage"
                          HAVE_RETURN_TYPE_C_LINKAGE)
  if (HAVE_RETURN_TYPE_C_LINKAGE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-return-type-c-linkage")
  endif(HAVE_RETURN_TYPE_C_LINKAGE)
endif ()

add_compile_definitions($<$<BOOL:${WIN32}>:NOMINMAX>)

# Configure the Ceres config.h compile options header using the current
# compile options and put the configured header into the Ceres build
# directory.  Note that the ceres/internal subdir in <build>/config where
# the configured config.h is placed is important, because Ceres will be
# built against this configured header, it needs to have the same relative
# include path as it would if it were in the source tree (or installed).
create_ceres_config("${CERES_COMPILE_OPTIONS}"
  ${Ceres_BINARY_DIR}/${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal)

if (CMAKE_CL OR CMAKE_CL_64)
  add_compile_options (/bigobj)
endif (CMAKE_CL OR CMAKE_CL_64)

add_subdirectory(internal/ceres)

if (BUILD_DOCUMENTATION)
  find_package (Sphinx REQUIRED COMPONENTS sphinx_rtd_theme)

  if (NOT Sphinx_FOUND)
    update_cache_variable(BUILD_DOCUMENTATION OFF)
  else()
    # Generate the User's Guide (html).
    # The corresponding target is ceres_docs, but is included in ALL.
    add_subdirectory(docs)
  endif()
endif (BUILD_DOCUMENTATION)

add_feature_info (Documentation BUILD_DOCUMENTATION
  "Build the HTML documentation")

if (BUILD_EXAMPLES)
  add_subdirectory(examples)
endif (BUILD_EXAMPLES)

# Setup installation of Ceres public headers.
file(GLOB CERES_HDRS ${Ceres_SOURCE_DIR}/include/ceres/*.h)
install(FILES ${CERES_HDRS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ceres)

file(GLOB CERES_PUBLIC_INTERNAL_HDRS ${Ceres_SOURCE_DIR}/include/ceres/internal/*.h)
install(FILES ${CERES_PUBLIC_INTERNAL_HDRS} DESTINATION
  ${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal)

# Also setup installation of Ceres config.h configured with the current
# build options and export.h into the installed headers directory.
install(DIRECTORY ${Ceres_BINARY_DIR}/${CMAKE_INSTALL_INCLUDEDIR}/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

if (NOT glog_FOUND)
  # Install miniglog header if being used as logging #includes appear in
  # installed public Ceres headers.
  install(FILES ${Ceres_SOURCE_DIR}/internal/ceres/miniglog/glog/logging.h
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal/miniglog/glog)
endif (NOT glog_FOUND)

# Add an uninstall target to remove all installed files.
add_custom_target(uninstall
                  COMMAND ${CMAKE_COMMAND} -P ${CMAKE_BINARY_DIR}/cmake/uninstall.cmake)

# Set relative install paths, which are appended to CMAKE_INSTALL_PREFIX to
# generate the absolute install paths.
set_target_properties (ceres PROPERTIES EXPORT_NAME Ceres)

install(TARGETS ${_Ceres_EXPORT_TARGETS}
        EXPORT  CeresTargets
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

export (TARGETS ${_Ceres_EXPORT_TARGETS} NAMESPACE Ceres:: FILE CeresTargets.cmake)
export (PACKAGE Ceres)

# This "exports" all targets which have been put into the export set
# "CeresTargets". This means that CMake generates a file with the given
# filename, which can later on be loaded by projects using this package.
# This file contains ADD_LIBRARY(bar IMPORTED) statements for each target
# in the export set, so when loaded later on CMake will create "imported"
# library targets from these, which can be used in many ways in the same way
# as a normal library target created via a normal ADD_LIBRARY().
install(EXPORT CeresTargets NAMESPACE Ceres::
        DESTINATION ${RELATIVE_CMAKECONFIG_INSTALL_DIR})

configure_package_config_file (
  CeresConfig.cmake.in
  ${Ceres_BINARY_DIR}/CeresConfig.cmake
  INSTALL_DESTINATION ${RELATIVE_CMAKECONFIG_INSTALL_DIR}
  NO_CHECK_REQUIRED_COMPONENTS_MACRO)
write_basic_package_version_file (CeresConfigVersion.cmake VERSION
  ${Ceres_VERSION} COMPATIBILITY AnyNewerVersion)

# Install these files into the same directory as the generated exports-file,
# we include the FindPackage scripts for libraries whose headers are included
# in the public API of Ceres and should thus be present in CERES_INCLUDE_DIRS.
install(FILES "${Ceres_BINARY_DIR}/CeresConfig.cmake"
              "${Ceres_BINARY_DIR}/CeresConfigVersion.cmake"
        DESTINATION ${RELATIVE_CMAKECONFIG_INSTALL_DIR})

set (Ceres_EXPORT_TARGETS ceres)

if (TARGET ceres_cuda_kernels)
  # The target ceres depends on ceres_cuda_kernels requiring the latter to be
  # exported as part of the same export set.
  list (APPEND Ceres_EXPORT_TARGETS ceres_cuda_kernels)
endif (TARGET ceres_cuda_kernels)

unset (Ceres_EXPORT_TARGETS)

add_feature_info (Examples BUILD_EXAMPLES "Build the examples")

set_package_properties (glog PROPERTIES
  DESCRIPTION "C++ implementation of the Google logging module"
  URL "https://github.com/google/glog"
)

set_package_properties (gflags PROPERTIES
  DESCRIPTION "C++ library from commandline flags processing"
  URL "https://github.com/gflags/gflags"
)

set_package_properties (Eigen3 PROPERTIES
  DESCRIPTION "C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms"
  URL "http://eigen.tuxfamily.org"
)

set_package_properties (SuiteSparse PROPERTIES
  TYPE RECOMMENDED
  URL "http://faculty.cse.tamu.edu/davis/suitesparse.html"
)

set_package_properties (LAPACK PROPERTIES
  DESCRIPTION "Linear Algebra PACKage"
  TYPE RECOMMENDED
)



set_package_properties (Threads PROPERTIES
  DESCRIPTION "Multithreading support"
)

set_package_properties (OpenMP PROPERTIES
  DESCRIPTION "Multiprocessing API support"
  PURPOSE "Used for the implementation of the OpenMP multithreading backend"
)

feature_summary (WHAT ALL)
