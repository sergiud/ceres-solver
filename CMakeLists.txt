# Ceres Solver - A fast non-linear least squares minimizer
# Copyright 2015 Google Inc. All rights reserved.
# http://ceres-solver.org/
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Google Inc. nor the names of its contributors may be
#   used to endorse or promote products derived from this software without
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Authors: keir@google.com (Keir Mierle)
#          alexs.mac@gmail.com (Alex Stewart)

cmake_minimum_required(VERSION 3.5)

cmake_policy(SET CMP0003 NEW)
if (POLICY CMP0042)
  cmake_policy(SET CMP0042 NEW)
endif()

if (POLICY CMP0063)
  cmake_policy (SET CMP0063 NEW)
endif (POLICY CMP0063)

project(Ceres LANGUAGES C CXX VERSION 2.0.0)

set (CMAKE_CXX_STANDARD 14)
set (CMAKE_CXX_STANDARD_REQUIRED ON)
set (CMAKE_CXX_VISIBILITY_PRESET hidden)
set (CMAKE_VISIBILITY_INLINES_HIDDEN 1)

# NOTE: The 'generic' CMake variables CMAKE_[SOURCE/BINARY]_DIR should not be
#       used.  Always use the project-specific variants (generated by CMake):
#       <PROJECT_NAME_MATCHING_CASE>_[SOURCE/BINARY]_DIR, e.g.
#       Ceres_SOURCE_DIR (note, *not* CERES_SOURCE_DIR) instead, as these will
#       always point to the correct directories for the Ceres project, even if
#       it is nested inside another source tree, whereas the 'generic'
#       CMake variables refer to the *first* project() declaration, i.e. the
#       top-level project, not Ceres, if Ceres is nested.

# Make CMake aware of the cmake folder for local FindXXX scripts,
# append rather than set in case the user has passed their own
# additional paths via -D.
list(APPEND CMAKE_MODULE_PATH "${Ceres_SOURCE_DIR}/cmake")

include (AddCompileFlagsIfSupported)
include (CMakeDependentOption)
include (CreateCeresConfig)
include (FeatureSummary)
include (GenerateExportHeader)
include (GNUInstallDirs)
include (UpdateCacheVariable)

# Set up the git hook to make Gerrit Change-Id: lines in commit messages.
include(AddGerritCommitHook)
add_gerrit_commit_hook(${Ceres_SOURCE_DIR} ${Ceres_BINARY_DIR})

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${Ceres_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${Ceres_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${Ceres_BINARY_DIR}/lib)
# Set postfixes for generated libraries based on buildtype.
set(CMAKE_RELEASE_POSTFIX "")
set(CMAKE_DEBUG_POSTFIX "-debug")

# Read the Ceres version from the source, such that we only ever have a single
# definition of the Ceres version.
include(ReadCeresVersionFromSource)
read_ceres_version_from_source(${Ceres_SOURCE_DIR})

set (CPACK_PACKAGE_NAME ceres-solver)
set (CPACK_PACKAGE_DESCRIPTION_SUMMARY "")
set (CPACK_PACKAGE_VERSION_MAJOR ${CERES_VERSION_MAJOR})
set (CPACK_PACKAGE_VERSION_MINOR ${CERES_VERSION_MINOR})
set (CPACK_PACKAGE_VERSION_PATCH ${CERES_VERSION_PATCH})
set (CPACK_PACKAGE_VERSION ${CERES_VERSION})

include (CMakePackageConfigHelpers)
include (CPack)
include (CheckFunctionExists)

option(BUILD_TESTING "Enable tests" ON)

if (BUILD_TESTING)
  enable_testing()
endif (BUILD_TESTING)

option(WITH_MINILOG "Use a stripped down version of glog." OFF)
option(WITH_GFLAGS "Enable Google Flags." ON)
option(WITH_SUITESPARSE "Enable SuiteSparse." ON)
option(WITH_CXSPARSE "Enable CXSparse." ON)
option(WITH_LAPACK "Enable use of LAPACK." ON)
# Template specializations for the Schur complement based solvers. If
# compile time, binary size or compiler performance is an issue, you
# may consider disabling this.
option(WITH_SCHUR_SPECIALIZATIONS "Enable fixed-size schur specializations." ON)
option(WITH_CUSTOM_BLAS
       "Use handcoded BLAS routines (usually faster) instead of Eigen."
       ON)

set (WITH_THREADING_BACKEND "Threads" CACHE STRING
  "Enable threaded solving using the specified backend")

set_property (CACHE WITH_THREADING_BACKEND PROPERTY STRINGS
  Threads;OpenMP;None)

if (WITH_THREADING_BACKEND STREQUAL "")
  if (OPENMP_FOUND)
    set (WITH_THREADING_BACKEND OpenMP CACHE STRING "" FORCE)
  else (OPENMP_FOUND)
    set (WITH_THREADING_BACKEND Threads CACHE STRING "" FORCE)
  endif (OPENMP_FOUND)
endif (WITH_THREADING_BACKEND STREQUAL "")

if (WITH_THREADING_BACKEND STREQUAL "")
  set (WITH_OPENMP TRUE)
elseif (WITH_THREADING_BACKEND STREQUAL OpenMP)
  set (WITH_OPENMP TRUE)
  list(APPEND CERES_COMPILE_OPTIONS CERES_USE_OPENMP)
elseif (WITH_THREADING_BACKEND STREQUAL Threads)
  set (WITH_CXX_THREADS TRUE)
  list(APPEND CERES_COMPILE_OPTIONS CERES_USE_CXX_THREADS)
elseif (WITH_THREADING_BACKEND STREQUAL None)
  list(APPEND CERES_COMPILE_OPTIONS CERES_NO_THREADS)
endif (WITH_THREADING_BACKEND STREQUAL "")

# Enable the use of Eigen as a sparse linear algebra library for
# solving the nonlinear least squares problems.
OPTION(WITH_EIGENSPARSE
  "Enable Eigen as a sparse linear algebra library, WARNING: results in an LGPL licensed Ceres." OFF)

option(BUILD_DOCUMENTATION "Build User's Guide (html)" OFF)
option(BUILD_EXAMPLES "Build examples" ON)
option(WITH_BENCHMARK "Build Ceres benchmarking suite" ON)
option(BUILD_SHARED_LIBS "Build Ceres as a shared library." OFF)
option(PROVIDE_UNINSTALL_TARGET "Add a custom target to ease removal of installed targets" ON)
set(SANITIZERS "" CACHE STRING "Semicolon-separated list of sanitizers to use (e.g address, memory, thread)")
include(EnableSanitizer)
enable_sanitizer(${SANITIZERS})

# IOS is defined iff using the iOS.cmake CMake toolchain to build a static
# library for iOS.
if (IOS)
  message(STATUS "Building Ceres for iOS platform: ${IOS_PLATFORM}")

  # Ceres requires at least iOS 7.0+.
  if (IOS_DEPLOYMENT_TARGET VERSION_LESS 7.0)
    message(FATAL_ERROR "Unsupported iOS version: ${IOS_DEPLOYMENT_TARGET}, Ceres "
      "requires at least iOS version 7.0")
  endif()

  update_cache_variable(WITH_MINILOG ON)
  message(STATUS "Building for iOS: Forcing use of miniglog instead of glog.")

  update_cache_variable(WITH_SUITESPARSE OFF)
  update_cache_variable(WITH_CXSPARSE OFF)
  update_cache_variable(WITH_GFLAGS OFF)
  # Apple claims that the BLAS call dsyrk_ is a private API, and will not allow
  # you to submit to the Apple Store if the symbol is present.
  update_cache_variable(WITH_LAPACK OFF)
  message(STATUS "Building for iOS: SuiteSparse, CXSparse, LAPACK, gflags, "
    "and OpenMP are not available.")

  update_cache_variable(BUILD_EXAMPLES OFF)
  message(STATUS "Building for iOS: Will not build examples.")
endif (IOS)

if (NOT WITH_BENCHMARK)
  set (CMAKE_DISABLE_FIND_PACKAGE_benchmark ON)
endif (NOT WITH_BENCHMARK)

find_package (benchmark)
find_package (Eigen3 3.3 REQUIRED NO_MODULE)

if (Eigen3_VERSION VERSION_LESS 3.1.0)
  message(FATAL_ERROR "-- Ceres requires Eigen version >= 3.1.0 in order "
    "that Eigen/SparseCore be available, detected version of Eigen is: "
    "${Eigen3_VERSION}")
endif (Eigen3_VERSION VERSION_LESS 3.1.0)

# Ensure that only MPL2 licensed code is part of the default build.
if (WITH_EIGENSPARSE)
  list(APPEND CERES_COMPILE_OPTIONS CERES_USE_EIGEN_SPARSE)
  message("   Enabling the use of Eigen as a sparse linear algebra library ")
  message("   for solving the nonlinear least squares problems. Enabling ")
  message("   this option results in an LGPL licensed version of ")
  message("   Ceres Solver as the Simplicial Cholesky factorization in Eigen")
  message("   is licensed under the LGPL. ")

  if (Eigen3_VERSION VERSION_LESS 3.2.2)
    message("   WARNING:")
    message("")
    message("   Your version of Eigen (${Eigen3_VERSION}) is older than ")
    message("   version 3.2.2.  The performance of SPARSE_NORMAL_CHOLESKY ")
    message("   and SPARSE_SCHUR linear solvers will suffer.")
  endif (Eigen3_VERSION VERSION_LESS 3.2.2)
else (WITH_EIGENSPARSE)
  add_definitions(-DEIGEN_MPL2_ONLY)
endif (WITH_EIGENSPARSE)

add_feature_info (EigenSparse WITH_EIGENSPARSE
"Use Eigen as a sparse linear algebra library for solving the nonlinear \
least squares problems (LGPL licensed Ceres)")

# SuiteSparse.
if (WITH_SUITESPARSE)
  # By default, if SuiteSparse and all dependencies are found, Ceres is
  # built with SuiteSparse support.

  # Check for SuiteSparse and dependencies.
  find_package(SuiteSparse NO_MODULE COMPONENTS CHOLMOD SPQR)

  IF (SuiteSparse_FOUND)
    set (SUITESPARSE_DEPENDENCY
      "find_dependency (SuiteSparse ${SuiteSparse_VERSION} NO_MODULE)")
    # On Ubuntu the system install of SuiteSparse (v3.4.0) up to at least
    # Ubuntu 13.10 cannot be used to link shared libraries.
    if (BUILD_SHARED_LIBS AND
        SUITESPARSE_IS_BROKEN_SHARED_LINKING_UBUNTU_SYSTEM_VERSION)
      message(FATAL_ERROR "You are attempting to build Ceres as a shared "
        "library on Ubuntu using a system package install of SuiteSparse "
        "3.4.0. This package is broken and does not support the "
        "construction of shared libraries (you can still build Ceres as "
        "a static library).  If you wish to build a shared version of Ceres "
        "you should uninstall the system install of SuiteSparse "
        "(libsuitesparse-dev) and perform a source install of SuiteSparse "
        "(we recommend that you use the latest version), "
        "see http://ceres-solver.org/building.html for more information.")
    endif (BUILD_SHARED_LIBS AND
      SUITESPARSE_IS_BROKEN_SHARED_LINKING_UBUNTU_SYSTEM_VERSION)
  else (SuiteSparse_FOUND)
    # Disable use of SuiteSparse if it cannot be found and continue.
    message("-- Did not find all SuiteSparse dependencies, disabling "
      "SuiteSparse support.")
    list(APPEND CERES_COMPILE_OPTIONS CERES_NO_SUITESPARSE)
  endif (SuiteSparse_FOUND)
else (WITH_SUITESPARSE)
  list(APPEND CERES_COMPILE_OPTIONS CERES_NO_SUITESPARSE)
endif (WITH_SUITESPARSE)

# LAPACK (& BLAS).
if (WITH_LAPACK)
  if (DEFINED ENV{BLA_VENDOR} OR DEFINED BLA_VENDOR)
    find_package (LAPACK)
  else (DEFINED ENV{BLA_VENDOR} OR DEFINED BLA_VENDOR)
    find_package (LAPACK 3.6.0 NO_MODULE)

    if (NOT (TARGET blas AND TARGET lapack))
      find_package (LAPACK)
    else (NOT (TARGET blas AND TARGET lapack))
      set (BLAS_LIBRARIES blas)
      set (LAPACK_LIBRARIES lapack)
    endif (NOT (TARGET blas AND TARGET lapack))

    if (NOT (LAPACK_FOUND))
      list(APPEND CERES_COMPILE_OPTIONS CERES_NO_LAPACK)
    endif (NOT (LAPACK_FOUND))
  endif (DEFINED ENV{BLA_VENDOR} OR DEFINED BLA_VENDOR)
else (WITH_LAPACK)
  list(APPEND CERES_COMPILE_OPTIONS CERES_NO_LAPACK)
endif (WITH_LAPACK)

# CXSparse.
if (WITH_CXSPARSE)
  # Don't search with REQUIRED as we can continue without CXSparse.
  find_package(CXSparse NO_MODULE)
  if (TARGET CXSparse::CXSparse)
    # Avoid I conflict
    set_property (DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS NCOMPLEX)
    set (CXSPARSE_DEPENDENCY "find_dependency (CXSparse ${CXSparse_VERSION} NO_MODULE)")
  else (TARGET CXSparse::CXSparse)
    # Disable use of CXSparse if it cannot be found and continue.
    list(APPEND CERES_COMPILE_OPTIONS CERES_NO_CXSPARSE)
  endif (TARGET CXSparse::CXSparse)
else (WITH_CXSPARSE)
  list(APPEND CERES_COMPILE_OPTIONS CERES_NO_CXSPARSE)
endif (WITH_CXSPARSE)

add_feature_info (AccelerateSparse WITH_ACCELERATESPARSE
  "Apple's Accelerate sparse support")

if (WITH_ACCELERATESPARSE)
  find_package(AccelerateSparse)
  if (AccelerateSparse_FOUND)
  else()
    update_cache_variable(ACCELERATESPARSE OFF)
    list(APPEND CERES_COMPILE_OPTIONS CERES_NO_ACCELERATE_SPARSE)
  endif()
else()
  list(APPEND CERES_COMPILE_OPTIONS CERES_NO_ACCELERATE_SPARSE)
  mark_as_advanced(FORCE AccelerateSparse_INCLUDE_DIR
                         AccelerateSparse_LIBRARY)
endif()

# Ensure that the user understands they have disabled all sparse libraries.
if (NOT WITH_SUITESPARSE AND NOT WITH_CXSPARSE AND NOT WITH_EIGENSPARSE)
  message("   ===============================================================")
  message("   Compiling without any sparse library: SuiteSparse, CXSparse ")
  message("   EigenSparse & Apple's Accelerate are all disabled or unavailable.  ")
  message("   No sparse linear solvers (SPARSE_NORMAL_CHOLESKY & SPARSE_SCHUR)")
  message("   will be available when Ceres is used.")
  message("   ===============================================================")
endif(NOT WITH_SUITESPARSE AND NOT WITH_CXSPARSE AND NOT WITH_EIGENSPARSE)

# GFlags.
if (NOT WITH_GFLAGS)
  set (CMAKE_DISABLE_FIND_PACKAGE_gflags ON)
endif (NOT WITH_GFLAGS)

# Don't search with REQUIRED as we can continue without gflags.
find_package(gflags 2.2.1)

if (gflags_FOUND)
  include (DetermineGflagsNamespace)

  set (CMAKE_REQUIRED_INCLUDES ${gflags_INCLUDE_DIR})
  determine_gflags_namespace (gflags_NAMESPACE)

  add_definitions (-DCERES_GFLAGS_NAMESPACE=${gflags_NAMESPACE})
endif (gflags_FOUND)

# MiniGLog.
if (WITH_MINILOG)
  message("-- Compiling minimal glog substitute into Ceres.")
  set(glog_INCLUDE_DIRS internal/ceres/miniglog)
  set(MINIGLOG_MAX_LOG_LEVEL 2 CACHE STRING "The maximum message severity level to be logged")
  add_definitions("-DMAX_LOG_LEVEL=${MINIGLOG_MAX_LOG_LEVEL}")
  message("-- Using minimal glog substitute (include): ${glog_INCLUDE_DIRS}")
  message("-- Max log level for minimal glog substitute: ${MINIGLOG_MAX_LOG_LEVEL}")

  # Mark as advanced (remove from default GUI view) the glog search
  # variables in case user disables WITH_MINILOG, FindGlog did not find it, so
  # made search variables visible in GUI for user to set, but then user enables
  # WITH_MINILOG instead of setting them.
  mark_as_advanced(FORCE glog_INCLUDE_DIR
                         glog_LIBRARY)
else (WITH_MINILOG)
  unset(MINIGLOG_MAX_LOG_LEVEL CACHE)
  # Don't search with REQUIRED so that configuration continues if not found and
  # we can output an error messages explaining WITH_MINILOG option.
  find_package(glog 0.3.5)

  if (glog_FOUND)
    set (GLOG_DEPENDENCY "find_dependency (glog ${glog_VERSION} NO_MODULE)")
  else (glog_FOUND)
    message(FATAL_ERROR "Can't find Google Log. Please set glog_INCLUDE_DIR & "
      "glog_LIBRARY or enable WITH_MINILOG option to use minimal glog "
      "implementation.")
  endif (glog_FOUND)
endif (WITH_MINILOG)

if (NOT WITH_SCHUR_SPECIALIZATIONS)
  list(APPEND CERES_COMPILE_OPTIONS CERES_RESTRICT_SCHUR_SPECIALIZATION)
  message("-- Disabling Schur specializations (faster compiles)")
endif (NOT WITH_SCHUR_SPECIALIZATIONS)

if (NOT WITH_CUSTOM_BLAS)
  list(APPEND CERES_COMPILE_OPTIONS CERES_NO_CUSTOM_BLAS)
  message("-- Disabling custom blas")
endif (NOT WITH_CUSTOM_BLAS)

if (WITH_OPENMP)
  # Find quietly, as we can continue without OpenMP if it is not found.
  find_package(OpenMP)

  if (OPENMP_FOUND)
    list(APPEND CERES_COMPILE_OPTIONS CERES_USE_OPENMP)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")

    if (UNIX)
      # At least on Linux, we need pthreads to be enabled for mutex to
      # compile.  This may not work on Windows or Android.
      find_package(Threads REQUIRED)
    endif (UNIX)
  endif (OPENMP_FOUND)
endif (WITH_OPENMP)
# Initialise CMAKE_REQUIRED_FLAGS used by CheckCXXSourceCompiles with the
# contents of CMAKE_CXX_FLAGS such that if the user has passed extra flags
# they are used when checking for compiler features.
set(CMAKE_REQUIRED_FLAGS ${CMAKE_CXX_FLAGS})

check_function_exists (_j0 HAVE__J0)
check_function_exists (_j1 HAVE__J1)
check_function_exists (_jn HAVE__JN)

if (NOT WITH_OPENMP AND NOT WITH_CXX_THREADS)
  message("-- Neither OpenMP, or C++11 threads is enabled, "
    "disabling multithreading.")
  list(APPEND CERES_COMPILE_OPTIONS CERES_NO_THREADS)
endif (NOT WITH_OPENMP AND NOT WITH_CXX_THREADS)

add_feature_info (Benchmarks WITH_BENCHMARK
  "Build Ceres benchmarks")

include_directories(
  include
  internal
  internal/ceres
  ${glog_INCLUDE_DIRS})
# Eigen SparseQR generates various compiler warnings related to unused and
# uninitialised local variables.  To avoid having to individually suppress these
# warnings around the #include statments for Eigen headers across all GCC/Clang
# versions, we tell CMake to treat Eigen headers as system headers.  This
# results in all compiler warnings from them being suppressed.
#
# Note that this is *not* propagated to clients, ie CERES_INCLUDE_DIRS
# used by clients after find_package(Ceres) does not identify Eigen as
# as system headers.
include_directories(SYSTEM ${EIGEN_INCLUDE_DIRS})

if (MINGW)
  # MinGW produces code that segfaults when performing matrix multiplications
  # in Eigen when compiled with -O3 (see [1]), as such force the use of -O2
  # which works.
  #
  # [1] http://eigen.tuxfamily.org/bz/show_bug.cgi?id=556
  message("-- MinGW detected, forcing -O2 instead of -O3 in Release for Eigen due "
          "to a MinGW bug: http://eigen.tuxfamily.org/bz/show_bug.cgi?id=556")
  string(REPLACE "-O3" "-O2" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
  update_cache_variable(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
endif (MINGW)

# After the tweaks for the compile settings, disable some warnings on MSVC.
if (MSVC)
  # On MSVC, math constants are not included in <cmath> or <math.h> unless
  # _USE_MATH_DEFINES is defined [1].  As we use M_PI in the examples, ensure
  # that _USE_MATH_DEFINES is defined before the first inclusion of <cmath>.
  #
  # [1] https://msdn.microsoft.com/en-us/library/4hwaceh6.aspx
  add_definitions("-D_USE_MATH_DEFINES")
  # Disable signed/unsigned int conversion warnings.
  add_compile_options("/wd4018" "/wd4267")
  # Disable warning about using struct/class for the same symobl.
  add_compile_options("/wd4099")
  # Disable warning about the insecurity of using "std::copy".
  add_compile_options("/wd4996")
  # Disable performance warning about int-to-bool conversion.
  add_compile_options("/wd4800")
  # Disable performance warning about fopen insecurity.
  add_compile_options("/wd4996")
  # Disable warning about int64 to int32 conversion. Disabling
  # this warning may not be correct; needs investigation.
  # TODO(keir): Investigate these warnings in more detail.
  add_compile_options("/wd4244")
  # It's not possible to use STL types in DLL interfaces in a portable and
  # reliable way. However, that's what happens with Google Log and Google Flags
  # on Windows. MSVC gets upset about this and throws warnings that we can't do
  # much about. The real solution is to link static versions of Google Log and
  # Google Test, but that seems tricky on Windows. So, disable the warning.
  add_compile_options("/wd4251")

  # Add bigobj flag otherwise the build would fail due to large object files
  # probably resulting from generated headers (like the fixed-size schur
  # specializations).
  add_compile_options("/bigobj")

  # Google Flags doesn't have their DLL import/export stuff set up correctly,
  # which results in linker warnings. This is irrelevant for Ceres, so ignore
  # the warnings.
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /ignore:4049")

  # Tuple sizes of 10 are used by Gtest.
  add_definitions("-D_VARIADIC_MAX=10")
endif (MSVC)

if (UNIX)
  # Flags which we add to GCC to make it more picky about stuff
  # we do care about,
  add_cxx_compiler_flag_if_supported(CERES_STRICT_CXX_FLAGS
                                     -Wmissing-declarations)
  # Flags which we add to GCC to silence lots of annoying false-positives.
  add_cxx_compiler_flag_if_supported(CERES_STRICT_CXX_FLAGS
                                     -Wno-unknown-pragmas)
  add_cxx_compiler_flag_if_supported(CERES_STRICT_CXX_FLAGS
                                     -Wno-sign-compare)
  add_cxx_compiler_flag_if_supported(CERES_STRICT_CXX_FLAGS
                                     -Wno-unused-parameter)
  add_cxx_compiler_flag_if_supported(CERES_STRICT_CXX_FLAGS
                                     -Wno-missing-field-initializers)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CERES_STRICT_CXX_FLAGS}")
endif (UNIX)

# Use a larger inlining threshold for Clang, since it hobbles Eigen,
# resulting in an unreasonably slow version of the blas routines. The
# -Qunused-arguments is needed because CMake passes the inline
# threshold to the linker and clang complains about it and dies.
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang") # Matches Clang & AppleClang.
  set(CMAKE_CXX_FLAGS
    "${CMAKE_CXX_FLAGS} -Qunused-arguments -mllvm -inline-threshold=600")

  # Older versions of Clang (<= 2.9) do not support the 'return-type-c-linkage'
  # option, so check for its presence before adding it to the default flags set.
  include(CheckCXXCompilerFlag)
  check_cxx_compiler_flag("-Wno-return-type-c-linkage"
                          HAVE_RETURN_TYPE_C_LINKAGE)
  if (HAVE_RETURN_TYPE_C_LINKAGE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-return-type-c-linkage")
  endif(HAVE_RETURN_TYPE_C_LINKAGE)
endif ()

# Configure the Ceres config.h compile options header using the current
# compile options and put the configured header into the Ceres build
# directory.  Note that the ceres/internal subdir in <build>/config where
# the configured config.h is placed is important, because Ceres will be
# built against this configured header, it needs to have the same relative
# include path as it would if it were in the source tree (or installed).
create_ceres_config("${CERES_COMPILE_OPTIONS}"
  ${Ceres_BINARY_DIR}/include/ceres/internal
)

if (CMAKE_CL OR CMAKE_CL_64)
  add_compile_options (/bigobj)
endif (CMAKE_CL OR CMAKE_CL_64)

add_subdirectory(internal/ceres)

if (BUILD_DOCUMENTATION)
  set(CERES_DOCS_INSTALL_DIR "share/doc/ceres" CACHE STRING
      "Ceres docs install path relative to CMAKE_INSTALL_PREFIX")

  find_package(Sphinx)

  if (NOT SPHINX_FOUND)
    update_cache_variable(BUILD_DOCUMENTATION OFF)
  else()
    # Generate the User's Guide (html).
    # The corresponding target is ceres_docs, but is included in ALL.
    add_subdirectory(docs)
  endif()
endif (BUILD_DOCUMENTATION)

add_feature_info (Documentation BUILD_DOCUMENTATION
  "Build the HTML documentation")

if (BUILD_EXAMPLES)
  add_subdirectory(examples)
endif (BUILD_EXAMPLES)

# Setup installation of Ceres public headers.
file(GLOB CERES_HDRS ${Ceres_SOURCE_DIR}/include/ceres/*.h)
install(FILES ${CERES_HDRS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ceres)

file(GLOB CERES_PUBLIC_INTERNAL_HDRS ${Ceres_SOURCE_DIR}/include/ceres/internal/*.h)
install(FILES ${CERES_PUBLIC_INTERNAL_HDRS} DESTINATION
  ${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal)

# Also setup installation of Ceres config.h configured with the current
# build options into the installed headers directory.
install(FILES ${Ceres_BINARY_DIR}/include/ceres/internal/config.h
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal)

if (WITH_MINILOG)
  # Install miniglog header if being used as logging #includes appear in
  # installed public Ceres headers.
  install(FILES ${Ceres_SOURCE_DIR}/internal/ceres/miniglog/glog/logging.h
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal/miniglog/glog)
endif (WITH_MINILOG)

# Add an uninstall target to remove all installed files.
add_custom_target(uninstall
                  COMMAND ${CMAKE_COMMAND} -P ${CMAKE_BINARY_DIR}/cmake/uninstall.cmake)

# Set relative install paths, which are appended to CMAKE_INSTALL_PREFIX to
# generate the absolute install paths.
set(RELATIVE_CMAKECONFIG_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/Ceres)

set_target_properties (ceres PROPERTIES EXPORT_NAME Ceres)

export (TARGETS ceres NAMESPACE Ceres:: FILE CeresTargets.cmake)
export (PACKAGE Ceres)

# This "exports" all targets which have been put into the export set
# "CeresExport". This means that CMake generates a file with the given
# filename, which can later on be loaded by projects using this package.
# This file contains ADD_LIBRARY(bar IMPORTED) statements for each target
# in the export set, so when loaded later on CMake will create "imported"
# library targets from these, which can be used in many ways in the same way
# as a normal library target created via a normal ADD_LIBRARY().
install(EXPORT CeresTargets NAMESPACE  Ceres::
        DESTINATION ${RELATIVE_CMAKECONFIG_INSTALL_DIR})

configure_package_config_file (
  CeresConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/CeresConfig.cmake
  INSTALL_DESTINATION ${RELATIVE_CMAKECONFIG_INSTALL_DIR}
  NO_CHECK_REQUIRED_COMPONENTS_MACRO)
write_basic_package_version_file (CeresConfigVersion.cmake VERSION
  ${CERES_VERSION} COMPATIBILITY AnyNewerVersion)

generate_export_header (ceres EXPORT_FILE_NAME
    ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal/export.h)

# Install these files into the same directory as the generated exports-file,
# we include the FindPackage scripts for libraries whose headers are included
# in the public API of Ceres and should thus be present in CERES_INCLUDE_DIRS.
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/CeresConfig.cmake"
              "${CMAKE_CURRENT_BINARY_DIR}/CeresConfigVersion.cmake"
        DESTINATION ${RELATIVE_CMAKECONFIG_INSTALL_DIR})

install (FILES ${CMAKE_CURRENT_BINARY_DIR}/include/ceres/internal/export.h
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal)

add_feature_info (Examples BUILD_EXAMPLES "Build the examples")

set_package_properties (glog PROPERTIES
  DESCRIPTION "C++ implementation of the Google logging module"
  URL "https://github.com/google/glog"
)

set_package_properties (gflags PROPERTIES
  DESCRIPTION "C++ library from commandline flags processing"
  URL "https://github.com/gflags/gflags"
)

set_package_properties (Eigen3 PROPERTIES
  DESCRIPTION "C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms"
  URL "http://eigen.tuxfamily.org"
)

set_package_properties (CXSparse PROPERTIES
  URL "http://faculty.cse.tamu.edu/davis/suitesparse.html"
)

set_package_properties (SuiteSparse PROPERTIES
  TYPE RECOMMENDED
  URL "http://faculty.cse.tamu.edu/davis/suitesparse.html"
)

set_package_properties (LAPACK PROPERTIES
  DESCRIPTION "Linear Algebra PACKage"
  TYPE RECOMMENDED
)

set_package_properties (Threads PROPERTIES
  DESCRIPTION "Multithreading support"
)

set_package_properties (OpenMP PROPERTIES
  DESCRIPTION "Multiprocessing API support"
  PURPOSE "Used for the implementation of the OpenMP multithreading backend"
)

feature_summary (WHAT ALL)
