# Module for locating Intel's Threading Building Blocks (TBB).
#
# Customizable variables:
#   TBB_ROOT_DIR
#     Specifies TBB's root directory.
#
# Read-only variables:
#   TBB_FOUND
#     Indicates whether the library has been found.
#
#   TBB_INCLUDE_DIRS
#      Specifies TBB's include directory.
#
#   TBB_LIBRARIES
#     Specifies TBB libraries that should be passed to target_link_libararies.
#
#   TBB_<COMPONENT>_LIBRARIES
#     Specifies the libraries of a specific <COMPONENT>.
#
#   TBB_<COMPONENT>_FOUND
#     Indicates whether the specified <COMPONENT> was found.
#
#
# Copyright (c) 2013-2016, 2018 Sergiu Deitsch
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTTBBLAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

cmake_policy (PUSH)
cmake_policy (VERSION 3.1)

include (FindPackageHandleStandardArgs)

if (CMAKE_VERSION VERSION_GREATER 2.8.7)
  set (_TBB_CHECK_COMPONENTS FALSE)
else (CMAKE_VERSION VERSION_GREATER 2.8.7)
  set (_TBB_CHECK_COMPONENTS TRUE)
endif (CMAKE_VERSION VERSION_GREATER 2.8.7)

find_path (TBB_ROOT_DIR
  NAMES include/tbb/tbb.h
  HINTS ENV TBBROOT
        ENV TBB40_INSTALL_DIR
        ENV TBB30_INSTALL_DIR
        ENV TBB22_INSTALL_DIR
        ENV TBB21_INSTALL_DIR
        ENV ICPP_COMPILER13
        ENV ICPP_COMPILER14
  PATH_SUFFIXES tbb
  DOC "TBB root directory")

find_path (TBB_INCLUDE_DIR
  NAMES tbb/tbb.h
  HINTS ${TBB_ROOT_DIR}
  PATH_SUFFIXES include
  DOC "TBB include directory")

if (DEFINED TBB_COMPILER)
  set (_TBB_COMPILER ${TBB_COMPILER})
elseif (NOT "$ENV{TBB_COMPILER}" STREQUAL "")
  set (_TBB_COMPILER $ENV{TBB_COMPILER})
elseif (MSVC14)
  set (_TBB_COMPILER vc14)
elseif (MSVC12)
  set (_TBB_COMPILER vc12)
elseif (MSVC11)
  set (_TBB_COMPILER vc11)
elseif (MSVC10)
  set (_TBB_COMPILER vc10)
elseif (MSVC90)
  set (_TBB_COMPILER vc9)
elseif (MSVC80)
  set (_TBB_COMPILER vc8)
elseif (MINGW)
  set (_TBB_COMPILER mingw)
elseif (WIN32)
  set (_TBB_COMPILER vc_mt)
endif (DEFINED TBB_COMPILER)

if (CMAKE_SIZEOF_VOID_P EQUAL 8)
  list (APPEND _TBB_POSSIBLE_LIB_SUFFIXES lib/intel64/${_TBB_COMPILER})
  list (APPEND _TBB_POSSIBLE_BIN_SUFFIXES bin/intel64/${_TBB_COMPILER})
  # Intel Composer
  list (APPEND _TBB_POSSIBLE_BIN_SUFFIXES ../redist/intel64/tbb/${_TBB_COMPILER})
else (CMAKE_SIZEOF_VOID_P EQUAL 8)
  list (APPEND _TBB_POSSIBLE_LIB_SUFFIXES lib/ia32/${_TBB_COMPILER})
  list (APPEND _TBB_POSSIBLE_BIN_SUFFIXES bin/ia32/${_TBB_COMPILER})
  # Intel Composer
  list (APPEND _TBB_POSSIBLE_BIN_SUFFIXES ../redist/ia32/tbb/${_TBB_COMPILER})
endif (CMAKE_SIZEOF_VOID_P EQUAL 8)

if (DEFINED _TBB_COMPILER)
  set (_TBB_APPEND_COMPILER /${_TBB_COMPILER})
endif (DEFINED _TBB_COMPILER)

list (APPEND _TBB_POSSIBLE_LIB_SUFFIXES lib/$ENV{TBB_ARCH_PLATFORM}${_TBB_APPEND_COMPILER})
list (APPEND _TBB_POSSIBLE_LIB_SUFFIXES lib/$ENV{TBB_TARGET_PLATFORM}/$ENV{TBB_TARGET_ARCH}${_TBB_APPEND_COMPILER})
list (APPEND _TBB_POSSIBLE_LIB_SUFFIXES lib/$ENV{INTEL_TARGET_PLATFORM}/$ENV{INTEL_TARGET_ARCH}${_TBB_APPEND_COMPILER})

find_library (TBB_LIBRARY_RELEASE
  NAMES tbb
  HINTS ${TBB_ROOT_DIR}
  PATH_SUFFIXES ${_TBB_POSSIBLE_LIB_SUFFIXES}
  DOC "TBB release library"
)

find_library (TBB_LIBRARY_DEBUG
  NAMES tbb_debug
  HINTS ${TBB_ROOT_DIR}
  PATH_SUFFIXES ${_TBB_POSSIBLE_LIB_SUFFIXES}
  DOC "TBB debug library"
)

if (TBB_LIBRARY_RELEASE AND TBB_LIBRARY_DEBUG)
  set (_TBB_LIBRARY optimized ${TBB_LIBRARY_RELEASE} debug ${TBB_LIBRARY_DEBUG})
elseif (TBB_LIBRARY_RELEASE)
  set (_TBB_LIBRARY ${TBB_LIBRARY_RELEASE})
elseif (TBB_LIBRARY_DEBUG)
  set (_TBB_LIBRARY ${TBB_LIBRARY_DEBUG})
endif (TBB_LIBRARY_RELEASE AND TBB_LIBRARY_DEBUG)

if (NOT TARGET tbb::tbb)
  add_library (tbb::tbb UNKNOWN IMPORTED)
endif (NOT TARGET tbb::tbb)

if (MSVC)
  set_target_properties (tbb::tbb PROPERTIES INTERFACE_COMPILE_DEFINITIONS
    __TBB_NO_IMPLICIT_LINKAGE=1)
endif (MSVC)

if (TBB_INCLUDE_DIR)
  set_target_properties (tbb::tbb PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
    ${TBB_INCLUDE_DIR})
endif (TBB_INCLUDE_DIR)

if (TBB_LIBRARY_DEBUG)
  list (APPEND _TBB_ALL_LIBS ${TBB_LIBRARY_DEBUG})
  set_property (TARGET tbb::tbb APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
  set_target_properties (tbb::tbb PROPERTIES IMPORTED_LOCATION_DEBUG
    ${TBB_LIBRARY_DEBUG})
endif (TBB_LIBRARY_DEBUG)

if (TBB_LIBRARY_RELEASE)
  list (APPEND _TBB_ALL_LIBS ${TBB_LIBRARY_RELEASE})
  set_property (TARGET tbb::tbb APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
  set_target_properties (tbb::tbb PROPERTIES IMPORTED_LOCATION_RELEASE
    ${TBB_LIBRARY_RELEASE})

  set_target_properties (tbb::tbb PROPERTIES
    MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release
    MAP_IMPORTED_CONFIG_MINSIZEREL Release
  )
endif (TBB_LIBRARY_RELEASE)

foreach (_TBB_COMPONENT ${TBB_FIND_COMPONENTS})
  string (TOUPPER ${_TBB_COMPONENT} _TBB_COMPONENT_UPPER)
  set (_TBB_LIBRARY_BASE TBB_${_TBB_COMPONENT_UPPER}_LIBRARY)

  if (${_TBB_COMPONENT} STREQUAL preview)
    set (_TBB_LIBRARY_NAME tbb_${_TBB_COMPONENT})
  else (${_TBB_COMPONENT} STREQUAL preview)
    set (_TBB_LIBRARY_NAME tbb${_TBB_COMPONENT})
  endif (${_TBB_COMPONENT} STREQUAL preview)

  find_library (${_TBB_LIBRARY_BASE}_RELEASE
    NAMES ${_TBB_LIBRARY_NAME}
    HINTS ${TBB_ROOT_DIR}
    PATH_SUFFIXES ${_TBB_POSSIBLE_LIB_SUFFIXES}
    DOC "TBB ${_TBB_COMPONENT} release library"
  )

  find_library (${_TBB_LIBRARY_BASE}_DEBUG
    NAMES ${_TBB_LIBRARY_NAME}_debug
    HINTS ${TBB_ROOT_DIR}
    PATH_SUFFIXES ${_TBB_POSSIBLE_LIB_SUFFIXES}
    DOC "TBB ${_TBB_COMPONENT} debug library"
  )

  mark_as_advanced (${_TBB_LIBRARY_BASE}_RELEASE ${_TBB_LIBRARY_BASE}_DEBUG)

  set (TBB_${_TBB_COMPONENT_UPPER}_FOUND TRUE)

  set (_TARGET tbb::${_TBB_COMPONENT})

  if (NOT TARGET ${_TARGET})
    add_library (${_TARGET} UNKNOWN IMPORTED)
  endif (NOT TARGET ${_TARGET})

  if (TBB_INCLUDE_DIR)
    set_target_properties (${_TARGET} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
      ${TBB_INCLUDE_DIR})
  endif (TBB_INCLUDE_DIR)

  if (${_TBB_LIBRARY_BASE}_DEBUG)
    set_property (TARGET ${_TARGET} APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
    set_target_properties (${_TARGET} PROPERTIES IMPORTED_LOCATION_DEBUG
      ${${_TBB_LIBRARY_BASE}_DEBUG})
  endif (${_TBB_LIBRARY_BASE}_DEBUG)

  if (${_TBB_LIBRARY_BASE}_RELEASE)
    set_property (TARGET ${_TARGET} APPEND PROPERTY IMPORTED_CONFIGURATIONS
      RELEASE)
    set_target_properties (${_TARGET} PROPERTIES IMPORTED_LOCATION_RELEASE
      ${${_TBB_LIBRARY_BASE}_RELEASE})

    set_target_properties (${_TARGET} PROPERTIES
      MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release
      MAP_IMPORTED_CONFIG_MINSIZEREL Release
    )
  endif (${_TBB_LIBRARY_BASE}_RELEASE)

  set (_TBB_COMP_LIBRARY_VAR _${_TBB_LIBRARY_BASE})

  if (${_TBB_LIBRARY_BASE}_DEBUG AND ${_TBB_LIBRARY_BASE}_RELEASE)
    set (${_TBB_COMP_LIBRARY_VAR}
      debug ${${_TBB_LIBRARY_BASE}_DEBUG}
      optimized ${${_TBB_LIBRARY_BASE}_RELEASE})
  elseif (${_TBB_LIBRARY_BASE}_RELEASE)
    set (${_TBB_COMP_LIBRARY_VAR} ${${_TBB_LIBRARY_BASE}_RELEASE})
  elseif (${_TBB_LIBRARY_BASE}_DEBUG)
    set (${_TBB_COMP_LIBRARY_VAR} ${${_TBB_LIBRARY_BASE}_DEBUG})
  else (${_TBB_LIBRARY_BASE}_DEBUG AND ${_TBB_LIBRARY_BASE}_RELEASE)
    # Component missing: record it for a later report
    list (APPEND _TBB_MISSING_COMPONENTS ${_TBB_COMPONENT})
    set (TBB_${_TBB_COMPONENT_UPPER}_FOUND FALSE)
  endif (${_TBB_LIBRARY_BASE}_DEBUG AND ${_TBB_LIBRARY_BASE}_RELEASE)

  if (${_TBB_LIBRARY_BASE}_DEBUG)
    list (APPEND _TBB_ALL_LIBS ${${_TBB_LIBRARY_BASE}_DEBUG})
  endif (${_TBB_LIBRARY_BASE}_DEBUG)

  if (${_TBB_LIBRARY_BASE}_RELEASE)
    list (APPEND _TBB_ALL_LIBS ${${_TBB_LIBRARY_BASE}_RELEASE})
  endif (${_TBB_LIBRARY_BASE}_RELEASE)

  set (TBB_${_TBB_COMPONENT}_FOUND ${TBB_${_TBB_COMPONENT_UPPER}_FOUND})

  if (${_TBB_COMP_LIBRARY_VAR})
    # setup the TBB_<COMPONENT>_LIBRARIES variable
    set (TBB_${_TBB_COMPONENT_UPPER}_LIBRARIES ${${_TBB_COMP_LIBRARY_VAR}})
    list (APPEND TBB_LIBRARIES ${${_TBB_COMP_LIBRARY_VAR}})
  else (${_TBB_COMP_LIBRARY_VAR})
    list (APPEND _TBB_MISSING_LIBRARIES ${_TBB_LIBRARY_BASE}_RELEASE)
  endif (${_TBB_COMP_LIBRARY_VAR})
endforeach (_TBB_COMPONENT ${TBB_FIND_COMPONENTS})

list (APPEND TBB_LIBRARIES ${_TBB_LIBRARY})
set (TBB_INCLUDE_DIRS ${TBB_INCLUDE_DIR})

if (DEFINED _TBB_MISSING_COMPONENTS AND _TBB_CHECK_COMPONENTS)
  if (NOT TBB_FIND_QUIETLY)
    message (STATUS "One or more TBB components were not found:")
    # Display missing components indented, each on a separate line
    foreach (_TBB_MISSING_COMPONENT ${_TBB_MISSING_COMPONENTS})
      message (STATUS "  " ${_TBB_MISSING_COMPONENT})
    endforeach (_TBB_MISSING_COMPONENT ${_TBB_MISSING_COMPONENTS})
  endif (NOT TBB_FIND_QUIETLY)
endif (DEFINED _TBB_MISSING_COMPONENTS AND _TBB_CHECK_COMPONENTS)

# Determine library's version

set (_TBB_VERSION_HEADER ${TBB_INCLUDE_DIR}/tbb/tbb_stddef.h)

if (EXISTS ${_TBB_VERSION_HEADER})
  FILE (READ ${_TBB_VERSION_HEADER} _TBB_VERSION_CONTENTS)

  string (REGEX REPLACE ".*#define TBB_VERSION_MAJOR[ \t]+([0-9]+).*" "\\1"
    TBB_VERSION_MAJOR "${_TBB_VERSION_CONTENTS}")
  string (REGEX REPLACE ".*#define TBB_VERSION_MINOR[ \t]+([0-9]+).*" "\\1"
    TBB_VERSION_MINOR "${_TBB_VERSION_CONTENTS}")

  set (TBB_VERSION ${TBB_VERSION_MAJOR}.${TBB_VERSION_MINOR})
  set (TBB_VERSION_COMPONENTS 2)
endif (EXISTS ${_TBB_VERSION_HEADER})

if (WIN32)
  find_program (LIB_EXECUTABLE NAMES lib
    HINTS "$ENV{VS120COMNTOOLS}/../../VC/bin"
          "$ENV{VS110COMNTOOLS}/../../VC/bin"
          "$ENV{VS100COMNTOOLS}/../../VC/bin"
          "$ENV{VS90COMNTOOLS}/../../VC/bin"
          "$ENV{VS71COMNTOOLS}/../../VC/bin"
          "$ENV{VS80COMNTOOLS}/../../VC/bin"
    DOC "Library manager")

  mark_as_advanced (LIB_EXECUTABLE)
endif (WIN32)

macro (GET_LIB_REQUISITES LIB REQUISITES)
  if (LIB_EXECUTABLE)
    get_filename_component (_LIB_PATH ${LIB_EXECUTABLE} PATH)

    if (MSVC)
      # Do not redirect the output
      unset (ENV{VS_UNICODE_OUTPUT})
    endif (MSVC)

    execute_process (COMMAND ${LIB_EXECUTABLE} /nologo /list ${LIB}
      WORKING_DIRECTORY ${_LIB_PATH}/../../Common7/IDE
      OUTPUT_VARIABLE _LIB_OUTPUT ERROR_QUIET)

    string (REPLACE "\n" ";" "${REQUISITES}" "${_LIB_OUTPUT}")
    list (REMOVE_DUPLICATES ${REQUISITES})
  endif (LIB_EXECUTABLE)
endmacro (GET_LIB_REQUISITES)

if (_TBB_ALL_LIBS)
  # collect lib requisites using the lib tool
  foreach (_TBB_COMPONENT ${_TBB_ALL_LIBS})
    get_lib_requisites (${_TBB_COMPONENT} _TBB_REQUISITES)
  endforeach (_TBB_COMPONENT)
endif (_TBB_ALL_LIBS)

if (NOT TBB_BINARY_DIR)
  set (_TBB_UPDATE_BINARY_DIR TRUE)
else (NOT TBB_BINARY_DIR)
  set (_TBB_UPDATE_BINARY_DIR FALSE)
endif (NOT TBB_BINARY_DIR)

set (_TBB_BINARY_DIR_HINTS ${_TBB_POSSIBLE_BIN_SUFFIXES})

if (_TBB_REQUISITES)
  find_file (TBB_BINARY_DIR NAMES ${_TBB_REQUISITES}
    HINTS ${TBB_ROOT_DIR} PATH_SUFFIXES ${_TBB_BINARY_DIR_HINTS}
  )
endif (_TBB_REQUISITES)

if (TBB_BINARY_DIR AND _TBB_UPDATE_BINARY_DIR)
  set (_TBB_BINARY_DIR ${TBB_BINARY_DIR})
  unset (TBB_BINARY_DIR CACHE)

  if (_TBB_BINARY_DIR)
    get_filename_component (_TBB_BINARY_DIR ${_TBB_BINARY_DIR} ABSOLUTE)
    get_filename_component (TBB_BINARY_DIR ${_TBB_BINARY_DIR} PATH)

    if (TBB_BINARY_DIR)
      set (TBB_BINARY_DIR ${TBB_BINARY_DIR} CACHE PATH "TBB binary directory")
    endif (TBB_BINARY_DIR)
  endif (_TBB_BINARY_DIR)
endif (TBB_BINARY_DIR AND _TBB_UPDATE_BINARY_DIR)

mark_as_advanced (TBB_INCLUDE_DIR TBB_LIBRARY_RELEASE TBB_LIBRARY_DEBUG)

if (NOT _TBB_CHECK_COMPONENTS)
 set (_TBB_FPHSA_ADDITIONAL_ARGS HANDLE_COMPONENTS)
endif (NOT _TBB_CHECK_COMPONENTS)

if (CMAKE_VERSION VERSION_GREATER 2.8.2)
  list (APPEND _TBB_FPHSA_ADDITIONAL_ARGS VERSION_VAR TBB_VERSION)
endif (CMAKE_VERSION VERSION_GREATER 2.8.2)

if (TBB_LIBRARY_DEBUG)
  set (_TBB_REQUIRED_LIB_VARS TBB_LIBRARY_DEBUG)
else (TBB_LIBRARY_DEBUG)
  set (_TBB_REQUIRED_LIB_VARS TBB_LIBRARY_RELEASE)
endif (TBB_LIBRARY_DEBUG)

find_package_handle_standard_args (TBB REQUIRED_VARS TBB_ROOT_DIR
  TBB_INCLUDE_DIR ${_TBB_REQUIRED_LIB_VARS} ${_TBB_MISSING_LIBRARIES}
  ${_TBB_FPHSA_ADDITIONAL_ARGS})

cmake_policy (POP)
